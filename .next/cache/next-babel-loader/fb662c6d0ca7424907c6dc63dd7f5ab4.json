{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport axios from 'axios';\nimport BaseService from '../../BaseService';\n\nvar PracticeService = /*#__PURE__*/function (_BaseService) {\n  _inherits(PracticeService, _BaseService);\n\n  var _super = _createSuper(PracticeService);\n\n  function PracticeService() {\n    _classCallCheck(this, PracticeService);\n\n    return _super.call(this, '/travelgo-one/practices');\n  }\n\n  _createClass(PracticeService, [{\n    key: \"createByGuest\",\n    value: function createByGuest(postData) {\n      var config = {\n        headers: {\n          'Content-Type': 'application/json' // 'Authorization': `Bearer ${token}`\n\n        }\n      };\n      return axios.post(this.url + '/create-by-guest', postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }]);\n\n  return PracticeService;\n}(BaseService);\n\nexport { PracticeService as default };","map":null,"metadata":{},"sourceType":"module"}