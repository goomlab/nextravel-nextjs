{"ast":null,"code":"// import AlertMessageActions from 'actions/AlertMessageActions';\n// import PageLoaderActions from 'actions/PageLoaderActions';\nexport default class BaseAction {\n  constructor() {\n    this.service = null;\n    this.consts = null;\n    this.redirect = null;\n  }\n\n  all(filter, count) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.search(filter, count).then(response => {\n        dispatch({\n          type: this.consts.SEARCHED,\n          items: response.data.data,\n          totItems: response.data.meta.total\n        }); // dispatch(PageLoaderActions.hide());\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  get(id) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.load(id).then(response => {\n        dispatch({\n          type: this.consts.LOADED,\n          item: response.data.data\n        }); // dispatch(PageLoaderActions.hide());\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  createPost(postData, ownProps) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.createPost(postData).then(response => {\n        dispatch({\n          type: this.consts.CREATED,\n          item: response.data.data\n        }); // dispatch(PageLoaderActions.hide());\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n        // let postype = this.getQueryString(ownProps.location, 'post_type');\n        // let redirect = this.redirect + '/' + response.data.data.id + ((postype) ? '?post_type='+postype : '');\n        // ownProps.history.push(redirect);\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  create(postData, ownProps) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.create(postData).then(response => {\n        dispatch({\n          type: this.consts.CREATED,\n          item: response.data.data\n        }); // dispatch(PageLoaderActions.hide());\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n        // let postype = this.getQueryString(ownProps.location, 'post_type');\n        // let redirect = this.redirect + '/' + response.data.data.id + ((postype) ? '?post_type='+postype : '');\n        // ownProps.history.push(redirect);\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  updatePost(id, postData, ownProps) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.updatePost(id, postData).then(response => {\n        dispatch({\n          type: this.consts.UPDATED,\n          item: response.data.data\n        }); // dispatch(PageLoaderActions.hide());\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n        // let postype = this.getQueryString(ownProps.location, 'post_type');\n        // let redirect = this.redirect + '/' + response.data.item.id + ((postype) ? '?post_type='+postype : '');\n        // ownProps.history.push(redirect);\n\n        dispatch(this.load(id));\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  update(id, postData, ownProps) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.update(id, postData).then(response => {\n        dispatch({\n          type: this.consts.UPDATED,\n          item: response.data.data\n        }); // dispatch(PageLoaderActions.hide());\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n        // dispatch(this.load(id));\n      }).catch(error => {// dispatch(PageLoaderActions.hide());\n        // if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n      });\n    };\n  }\n\n  remove(id) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.remove(id).then(response => {\n        dispatch({\n          type: this.consts.REMOVED // item: response.data.item\n\n        }); // dispatch(AlertMessageActions.alertMessageSuccess(response.data.message));\n        // dispatch(PageLoaderActions.hide());\n      }).catch(error => {// dispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // dispatch(PageLoaderActions.hide());\n      });\n    };\n  }\n\n  removeOnList(id, searchParams, searchCount) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.remove(id).then(response => {\n        dispatch({\n          type: this.consts.REMOVED // item: response.data.item\n\n        }); // dispatch(this.search(searchParams, searchCount));\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.message));\n        // dispatch(PageLoaderActions.hide());\n      }).catch(error => {// dispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // dispatch(PageLoaderActions.hide());\n      });\n    };\n  }\n\n  updateFields(id, postData, searchParams, searchCount) {\n    return dispatch => {\n      // dispatch(PageLoaderActions.show());\n      this.service.updateFields(id, postData).then(response => {\n        dispatch({\n          type: this.consts.UPDATED,\n          item: response.data.data\n        }); // dispatch(this.search(searchParams, searchCount));\n        // dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n        // dispatch(PageLoaderActions.hide());\n      }).catch(error => {// if( error.response && error.response.data && error.response.data.meta )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n        // else if( error.response && error.response.data && error.response.data.message )\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n        // else\n        // \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n        // dispatch(PageLoaderActions.hide());\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/giuseppe/Workspace/Di Costanzo Marco/nextravel.it/www/nextravel-nextjs/packages/BaseAction.js"],"names":["BaseAction","constructor","service","consts","redirect","all","filter","count","dispatch","search","then","response","type","SEARCHED","items","data","totItems","meta","total","catch","error","get","id","load","LOADED","item","createPost","postData","ownProps","CREATED","create","updatePost","UPDATED","update","remove","REMOVED","removeOnList","searchParams","searchCount","updateFields"],"mappings":"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","sourcesContent":["// import AlertMessageActions from 'actions/AlertMessageActions';\n// import PageLoaderActions from 'actions/PageLoaderActions';\n\nexport default class BaseAction {\n\n\tconstructor() {\n\t\tthis.service = null;\n\t\tthis.consts = null;\n\t\tthis.redirect = null;\n\t}\n\n\n\tall( filter, count ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.search(filter, count).then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.SEARCHED,\n\t\t\t\t\titems: response.data.data,\n\t\t\t\t\ttotItems: response.data.meta.total\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t}).catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\n\tget( id ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.load(id)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.LOADED,\n\t\t\t\t\titem: response.data.data\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\n\tcreatePost( postData, ownProps ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service\n\t\t\t.createPost(postData).then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.CREATED,\n\t\t\t\t\titem: response.data.data\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n\t\t\t\t\n\t\t\t\t// let postype = this.getQueryString(ownProps.location, 'post_type');\n\t\t\t\t// let redirect = this.redirect + '/' + response.data.data.id + ((postype) ? '?post_type='+postype : '');\n\t\t\t\t// ownProps.history.push(redirect);\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate( postData, ownProps ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service\n\t\t\t.create(postData).then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.CREATED,\n\t\t\t\t\titem: response.data.data\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n\t\t\t\t\n\t\t\t\t// let postype = this.getQueryString(ownProps.location, 'post_type');\n\t\t\t\t// let redirect = this.redirect + '/' + response.data.data.id + ((postype) ? '?post_type='+postype : '');\n\t\t\t\t// ownProps.history.push(redirect);\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\n\tupdatePost( id, postData, ownProps ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.updatePost(id, postData)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.UPDATED,\n\t\t\t\t\titem: response.data.data,\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n\t\t\t\t\n\t\t\t\t// let postype = this.getQueryString(ownProps.location, 'post_type');\n\t\t\t\t// let redirect = this.redirect + '/' + response.data.item.id + ((postype) ? '?post_type='+postype : '');\n\t\t\t\t// ownProps.history.push(redirect);\n\t\t\t\tdispatch(this.load(id));\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\n\tupdate( id, postData, ownProps ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.update(id, postData)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.UPDATED,\n\t\t\t\t\titem: response.data.data,\n\t\t\t\t});\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n\t\t\t\t// dispatch(this.load(id));\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t});\n\t\t}\n\t}\n\t\n\tremove( id ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.remove(id)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.REMOVED,\n\t\t\t\t\t// item: response.data.item\n\t\t\t\t});\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.message));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t});\n\t\t}\n\t}\n\n\tremoveOnList( id, searchParams, searchCount ) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.remove(id)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.REMOVED,\n\t\t\t\t\t// item: response.data.item\n\t\t\t\t});\n\t\t\t\t// dispatch(this.search(searchParams, searchCount));\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.message));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t});\n\t\t}\n\t}\n\t\n\tupdateFields( id, postData, searchParams, searchCount) {\n\t\treturn (dispatch) => {\n\t\t\t// dispatch(PageLoaderActions.show());\n\t\t\tthis.service.updateFields(id, postData)\n\t\t\t.then( response => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: this.consts.UPDATED,\n\t\t\t\t\titem: response.data.data\n\t\t\t\t});\n\t\t\t\t// dispatch(this.search(searchParams, searchCount));\n\t\t\t\t// dispatch(AlertMessageActions.alertMessageSuccess(response.data.meta.message));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t})\n\t\t\t.catch( error => {\n\t\t\t\t// if( error.response && error.response.data && error.response.data.meta )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.meta.message));\n\t\t\t\t// else if( error.response && error.response.data && error.response.data.message )\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.response.data.message));\n\t\t\t\t// else\n\t\t\t\t// \tdispatch(AlertMessageActions.alertMessageError('Errore: ' + error.status));\n\t\t\t\t// dispatch(PageLoaderActions.hide());\n\t\t\t});\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}