{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\n\nvar BaseService = /*#__PURE__*/function () {\n  function BaseService(url) {\n    _classCallCheck(this, BaseService);\n\n    this.url = \"\".concat(process.env.api_url) + (url ? url : '');\n    this.config = {\n      headers: {// API_KEY: '$2y$10$zgrnhniFfgWCIkTqUNmBJeJkre2AY3s7FXf8EIqdSzFodKK3uM7Jy',\n      }\n    };\n  }\n\n  _createClass(BaseService, [{\n    key: \"checkAuthApi\",\n    value: function checkAuthApi(json) {\n      var token = Cookies.get('access_token') || null;\n\n      if (token) {\n        if (json) return {\n          headers: {\n            // ...API.headers,\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(token)\n          }\n        };else return {\n          headers: {\n            // ...API.headers,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            // 'Content-Type': 'multipart/form-data',\n            'Authorization': \"Bearer \".concat(token)\n          }\n        };\n      } else {\n        if (json) {\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n        } else {\n          return {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"initApp\",\n    value: function initApp() {\n      return axios.get(this.url + '/travelgo-one/frontend/initialize', this.config).then(function (response) {\n        return Promise.resolve(response.data);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    } // all(params){\n    //   return axios.get(this.url, { params }, this.config)\n    //   .then(response => {\n    //     return Promise.resolve(response.data.data);\n    //   })\n    //   .catch(error => {\n    //     return Promise.reject(error);\n    //   });\n    // }\n\n  }, {\n    key: \"all\",\n    value: function all(params) {\n      var config = this.checkAuthApi();\n      return axios.get(this.url, _objectSpread({\n        params: params,\n        paramsSerializer: function paramsSerializer(params) {\n          return qs.stringify(params, {\n            encode: false\n          });\n        }\n      }, config)).then(function (response) {\n        return Promise.resolve(response.data.data);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return axios.get(\"\".concat(this.url, \"/\").concat(id), this.config).then(function (response) {\n        return Promise.resolve(response.data.data);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"getBySlug\",\n    value: function getBySlug(slug) {\n      return axios.get(\"\".concat(this.url, \"/by-slug/\").concat(slug), this.config).then(function (response) {\n        return Promise.resolve(response.data.data);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"search\",\n    value: function search(params) {\n      var config = this.checkAuthApi();\n      return axios.get(this.url, _objectSpread({\n        params: params,\n        paramsSerializer: function paramsSerializer(params) {\n          return qs.stringify(params, {\n            encode: false\n          });\n        }\n      }, config)).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load(id) {\n      var config = this.checkAuthApi();\n      return axios.get(\"\".concat(this.url, \"/\").concat(id), config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"createPost\",\n    value: function createPost(postData) {\n      var config = this.checkAuthApi();\n      return axios.post(this.url, postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(postData) {\n      var config = this.checkAuthApi('json');\n      return axios.post(this.url, postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(id, postData) {\n      var config = this.checkAuthApi('json');\n      config = _objectSpread(_objectSpread({}, config), {}, {\n        onUploadProgress: function onUploadProgress(progressEvent) {\n          return console.log(progressEvent.loaded);\n        }\n      });\n      return axios.put(this.url + '/' + id, postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"updatePost\",\n    value: function updatePost(id, postData) {\n      var config = this.checkAuthApi();\n      postData.append('_method', 'PUT');\n      return axios.post(this.url + '/' + id, postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var config = this.checkAuthApi();\n      return axios[\"delete\"](this.url + '/' + id, _objectSpread({}, config)).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"updateFields\",\n    value: function updateFields(id, postData) {\n      var config = this.checkAuthApi('json'); // config.headers = {\n      //   ...config.headers,\n      //   'Content-type' : 'application/form-url-encode'\n      // }\n      // postData['_method'] = 'PUT';\n\n      return axios.put(this.url + '/update-fields/' + id, postData, config).then(function (response) {\n        return Promise.resolve(response);\n      })[\"catch\"](function (error) {\n        return Promise.reject(error);\n      });\n    }\n  }]);\n\n  return BaseService;\n}();\n\nexport { BaseService as default };","map":null,"metadata":{},"sourceType":"module"}