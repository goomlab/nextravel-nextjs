{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\n\nvar MyDateRangePicker = function MyDateRangePicker(props) {\n  var _React$useState = React.useState({\n    startDate: props.startDate ? moment(props.startDate, \"YYYY-MM-DD\") : moment(),\n    endDate: props.endDate ? moment(props.endDate, \"YYYY-MM-DD\") : moment().add('2 days')\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _onApply = function onApply(event, picker) {\n    props.onChange(picker.startDate, picker.endDate);\n    setState({\n      startDate: picker.startDate,\n      endDate: picker.endDate\n    });\n  };\n\n  React.useEffect(function () {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      startDate: props.startDate ? moment(props.startDate, \"YYYY-MM-DD\") : moment(),\n      endDate: props.endDate ? moment(props.endDate, \"YYYY-MM-DD\") : moment().add('2 days')\n    }));\n  }, [props]);\n\n  var _onChange = function onChange(e) {\n    // non fare nulla\n    console.log(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(DateRangePicker, {\n    minDate: moment().format('YYYY-MM-DD'),\n    startDate: state.startDate,\n    endDate: state.endDate,\n    autoApply: true,\n    onApply: function onApply(event, picker) {\n      return _onApply(event, picker);\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"\",\n    name: \"\",\n    placeholder: \"Checkin\",\n    value: state.startDate.format('DD/MM/YYYY') + ' - ' + state.endDate.format('DD/MM/YYYY') || '',\n    onChange: function onChange(e) {\n      return _onChange(e);\n    }\n  })));\n};\n\nexport default MyDateRangePicker;","map":null,"metadata":{},"sourceType":"module"}