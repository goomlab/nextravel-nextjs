{"ast":null,"code":"import BaseAction from '~/packages/BaseAction';\nimport PageLoaderAction from '~/packages/Base/actions/PageLoaderAction';\nimport AlertMessageAction from '~/packages/Base/actions/AlertMessageAction';\nimport HotelService from '../services/HotelService';\nexport const hotelConsts = {\n  LOADING: 'HOTEL_LIST_LOADING',\n  ITEMS: 'HOTEL_LIST_ITEMS',\n  RESET_ITEMS: 'HOTEL_LIST_RESET_ITEMS' // RESET_ITEM: 'PRACTICE_BY_GUEST_RESET_ITEM',\n  // GET_CLIENT_IP: 'PRACTICE_BY_GUEST_GET_CLIENT_IP',\n  // CREATE: 'PRACTICE_BY_GUEST_CREATE',\n\n};\nexport default class HotelAction extends BaseAction {\n  constructor() {\n    super();\n    this.service = new HotelService();\n    this.consts = hotelConsts;\n  }\n\n  loading(state) {\n    return dispatch => {\n      dispatch({\n        type: this.consts.LOADING,\n        loading: state\n      });\n    };\n  }\n\n  query(params) {\n    return dispatch => {\n      dispatch(PageLoaderAction.show());\n      dispatch(this.loading(1));\n      this.service.query(params).then(response => {\n        dispatch({\n          type: this.consts.ITEMS,\n          items: response.data,\n          meta: response.meta\n        });\n        dispatch(PageLoaderAction.hide()); // if( response.data.length > 0 )\n\n        if (parseInt(response.meta.last_page) * parseInt(response.meta.per_page) <= parseInt(response.meta.total)) dispatch(this.loading(0));else dispatch(this.loading(1));\n      }).catch(error => {\n        dispatch({\n          type: this.consts.RESET_ITEMS,\n          items: [],\n          meta: null\n        });\n        dispatch(PageLoaderAction.hide());\n        dispatch(this.loading(0));\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/giuseppe/Workspace/Di Costanzo Marco/nextravel.it/www/nextravel-nextjs/packages/TravelgoOne/actions/HotelAction.js"],"names":["BaseAction","PageLoaderAction","AlertMessageAction","HotelService","hotelConsts","LOADING","ITEMS","RESET_ITEMS","HotelAction","constructor","service","consts","loading","state","dispatch","type","query","params","show","then","response","items","data","meta","hide","parseInt","last_page","per_page","total","catch","error"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,OAAO,EAAE,oBADgB;AAEzBC,EAAAA,KAAK,EAAE,kBAFkB;AAGzBC,EAAAA,WAAW,EAAE,wBAHY,CAIzB;AACA;AACA;;AANyB,CAApB;AASP,eAAe,MAAMC,WAAN,SAA0BR,UAA1B,CAAqC;AAClDS,EAAAA,WAAW,GAAG;AACd;AACA,SAAKC,OAAL,GAAe,IAAIP,YAAJ,EAAf;AACA,SAAKQ,MAAL,GAAcP,WAAd;AACC;;AAEDQ,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,WAAOC,QAAD,IAAc;AAClBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYN,OADX;AAEPO,QAAAA,OAAO,EAAEC;AAFF,OAAD,CAAR;AAID,KALD;AAMD;;AAIDG,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,WAAQH,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAACb,gBAAgB,CAACiB,IAAjB,EAAD,CAAR;AACAJ,MAAAA,QAAQ,CAAC,KAAKF,OAAL,CAAa,CAAb,CAAD,CAAR;AAEA,WAAKF,OAAL,CAAaM,KAAb,CAAmBC,MAAnB,EACCE,IADD,CACMC,QAAQ,IAAI;AAChBN,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYL,KADX;AAEPe,UAAAA,KAAK,EAAED,QAAQ,CAACE,IAFT;AAGPC,UAAAA,IAAI,EAAEH,QAAQ,CAACG;AAHR,SAAD,CAAR;AAKAT,QAAAA,QAAQ,CAACb,gBAAgB,CAACuB,IAAjB,EAAD,CAAR,CANgB,CAOhB;;AACA,YAAIC,QAAQ,CAACL,QAAQ,CAACG,IAAT,CAAcG,SAAf,CAAR,GAAoCD,QAAQ,CAACL,QAAQ,CAACG,IAAT,CAAcI,QAAf,CAA7C,IAA0EF,QAAQ,CAACL,QAAQ,CAACG,IAAT,CAAcK,KAAf,CAArF,EACEd,QAAQ,CAAC,KAAKF,OAAL,CAAa,CAAb,CAAD,CAAR,CADF,KAGEE,QAAQ,CAAC,KAAKF,OAAL,CAAa,CAAb,CAAD,CAAR;AACH,OAbD,EAcCiB,KAdD,CAcOC,KAAK,IAAI;AACdhB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYJ,WADX;AAEPc,UAAAA,KAAK,EAAE,EAFA;AAGPE,UAAAA,IAAI,EAAE;AAHC,SAAD,CAAR;AAKAT,QAAAA,QAAQ,CAACb,gBAAgB,CAACuB,IAAjB,EAAD,CAAR;AACAV,QAAAA,QAAQ,CAAC,KAAKF,OAAL,CAAa,CAAb,CAAD,CAAR;AACD,OAtBD;AAuBD,KA3BD;AA4BD;;AA/CiD","sourcesContent":["import BaseAction from '~/packages/BaseAction'\nimport PageLoaderAction from '~/packages/Base/actions/PageLoaderAction'\nimport AlertMessageAction from '~/packages/Base/actions/AlertMessageAction'\nimport HotelService from '../services/HotelService'\n\nexport const hotelConsts = {\n  LOADING: 'HOTEL_LIST_LOADING',\n  ITEMS: 'HOTEL_LIST_ITEMS',\n  RESET_ITEMS: 'HOTEL_LIST_RESET_ITEMS',\n  // RESET_ITEM: 'PRACTICE_BY_GUEST_RESET_ITEM',\n  // GET_CLIENT_IP: 'PRACTICE_BY_GUEST_GET_CLIENT_IP',\n  // CREATE: 'PRACTICE_BY_GUEST_CREATE',\n}\n\nexport default class HotelAction extends BaseAction {\n  constructor() {\n\t\tsuper();\n\t\tthis.service = new HotelService();\n\t\tthis.consts = hotelConsts;\n  }\n\n  loading(state) {\n    return(dispatch) => {\n      dispatch({\n        type: this.consts.LOADING,\n        loading: state\n      })\n    }\n  }\n  \n\n\n  query(params) {\n    return (dispatch) => {\n      dispatch(PageLoaderAction.show())\n      dispatch(this.loading(1))\n\n      this.service.query(params)\n      .then(response => {\n        dispatch({\n          type: this.consts.ITEMS,\n          items: response.data,\n          meta: response.meta\n        })\n        dispatch(PageLoaderAction.hide())\n        // if( response.data.length > 0 )\n        if((parseInt(response.meta.last_page) * parseInt(response.meta.per_page)) <= parseInt(response.meta.total))\n          dispatch(this.loading(0))\n        else\n          dispatch(this.loading(1))\n      })\n      .catch(error => {\n        dispatch({\n          type: this.consts.RESET_ITEMS,\n          items: [],\n          meta: null\n        })\n        dispatch(PageLoaderAction.hide())\n        dispatch(this.loading(0))\n      })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}