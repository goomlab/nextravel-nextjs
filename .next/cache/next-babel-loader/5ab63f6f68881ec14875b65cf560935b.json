{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport HotelServiceService from '~/packages/TravelgoOne/services/HotelServiceService';\nimport PracticeByGuestAction from '~/packages/TravelgoOne/actions/PracticeByGuestAction';\nimport MyDateRangePicker from '../MyDateRangePicker';\n\nconst BookingForm = props => {\n  /**\n   * ComponentDidUpdate\n   */\n  React.useEffect(() => {\n    //console.log('componentDidUpdate', props.practice, props.query)\n    let newState = Object.assign({}, props.practice);\n    props.setPractice(_objectSpread(_objectSpread({}, newState), {}, {\n      hotel_id: props.hotel.id,\n      rate_plan_id: props.rateplan.id,\n      checkin: props.query.checkin || null,\n      checkout: props.query.checkout || null,\n      treatment: props.query.treatment || null\n    }));\n  }, [props.query]);\n  const [transfers, setTransfers] = React.useState([]);\n  React.useEffect(() => {\n    let service = new HotelServiceService();\n    service.all({\n      type: {\n        key: 'type',\n        compare: '=',\n        value: 'transfer'\n      }\n    }).then(response => {\n      setTransfers(response);\n      console.log('transfers', response);\n    });\n  }, []);\n\n  const onChange = e => {\n    e.persist();\n    let newState = Object.assign({}, props.practice);\n\n    switch (e.target.name) {\n      case 'privacy':\n        newState[e.target.name] = e.target.checked ? 1 : 0;\n        break;\n\n      case 'first_name':\n      case 'last_name':\n      case 'email':\n      case 'mobile':\n        newState.customer[e.target.name] = e.target.value;\n        break;\n\n      default:\n        newState[e.target.name] = e.target.value;\n        break;\n    }\n\n    props.setPractice(newState);\n  };\n\n  const onChangeDatePicker = (startDate, endDate) => {\n    let newState = Object.assign({}, props.practice);\n    newState.checkin = startDate.format('YYYY-MM-DD');\n    newState.checkout = endDate.format('YYYY-MM-DD');\n    props.setPractice(newState);\n  };\n  /**\n   * Room\n   */\n\n\n  const onAddRoom = () => {\n    let newState = Object.assign({}, props.practice);\n    newState.rooms.push({\n      adults: 2,\n      childrens: 0,\n      childrenAges: []\n    });\n    props.setPractice(newState);\n  };\n\n  const onDeleteRoom = index => {\n    let newState = Object.assign({}, props.practice);\n    newState.rooms.splice(index, 1);\n    props.setPractice(newState);\n  };\n\n  const onAddRoomChildren = (e, index) => {\n    let newState = Object.assign({}, props.practice);\n    newState.rooms[index].childrenAges.push(e.target.value);\n    newState.rooms[index].childrenAges.sort();\n    props.setPractice(newState);\n  };\n\n  const onChangeRoom = (e, index) => {\n    e.persist();\n    let newState = Object.assign({}, props.practice);\n\n    switch (e.currentTarget.dataset.name) {\n      case \"childrens\":\n        if (parseInt(e.currentTarget.value) == 0) {\n          // reset childrenAges\n          newState.rooms[index].childrenAges = [];\n        } else if (newState.rooms[index].childrens > parseInt(e.currentTarget.value)) {\n          // rimuovo gli utlimi elementi\n          newState.rooms[index].childrenAges.splice(e.currentTarget.value);\n        } else {\n          // aggiungo age con valore 0\n          for (let j = newState.rooms[index].childrens; j < parseInt(e.currentTarget.value); j++) newState.rooms[index].childrenAges.push(-1);\n        }\n\n        newState.rooms[index].childrens = e.currentTarget.value;\n        break;\n\n      case \"ageChildrens\":\n        let indexChild = e.currentTarget.dataset.index;\n        newState.rooms[index].childrenAges[indexChild] = e.currentTarget.value;\n        newState.rooms[index].childrenAges.sort(function (a, b) {\n          return b - a;\n        }); // sort desc\n\n        break;\n\n      default:\n        newState.rooms[index][e.currentTarget.dataset.name] = e.currentTarget.value;\n        break;\n    }\n\n    props.setPractice(newState);\n  };\n  /**\n   * Submit\n   */\n\n\n  const handleSubmit = () => {\n    props.createPractice(props.practice);\n  };\n  /**\n   * Validate\n   */\n\n\n  const formik = useFormik({\n    initialValues: {\n      // checkin: props.checkin || \"\",\n      // checkout: props.practice.checkout || \"\",\n      treatment: props.practice.treatment || \"\",\n      first_name: props.practice.customer.first_name || \"\",\n      last_name: props.practice.customer.last_name || \"\",\n      email: props.practice.customer.email || \"\",\n      mobile: props.practice.customer.mobile || \"\",\n      privacy: props.practice.privacy || 0\n    },\n    validationSchema: yup.object().shape({\n      // checkin: yup.string().required('Campo non valido'),\n      // checkout: yup.string().required('Campo non valido'),\n      treatment: yup.string().required('Campo non valido'),\n      first_name: yup.string().required('Campo non valido'),\n      last_name: yup.string().required('Campo non valido'),\n      email: yup.string().required('Campo non valido'),\n      mobile: yup.string().required('Campo non valido'),\n      privacy: yup.number().min(1, 'Campo non valido').max(1, 'Campo non valido')\n    }),\n    enableReinitialize: true,\n    onSubmit: handleSubmit\n  });\n  /**\n   * Render\n   */\n\n  const renderRooms = () => {\n    let _html = [];\n\n    for (let i in props.practice.rooms) {\n      // adults\n      var _htmlAdultOptions = [];\n\n      _htmlAdultOptions.push(__jsx(\"option\", {\n        key: 0,\n        value: \"0\"\n      }, \"Adulti\"));\n\n      for (var j = 1; j <= 4; j++) {\n        _htmlAdultOptions.push(__jsx(\"option\", {\n          key: j,\n          value: j\n        }, j));\n      } // childrens\n\n\n      var _htmlChildrenOptions = [];\n\n      _htmlChildrenOptions.push(__jsx(\"option\", {\n        key: 0,\n        value: \"0\"\n      }, \"Bambini\"));\n\n      for (var j = 1; j <= 4; j++) {\n        _htmlChildrenOptions.push(__jsx(\"option\", {\n          key: j,\n          value: j\n        }, j));\n      } // children ages\n\n\n      var _ageOptions = [];\n\n      _ageOptions.push(__jsx(\"option\", {\n        key: -1,\n        value: \"\"\n      }, \"Et\\xE0\"));\n\n      for (var j = 0; j <= 12; j++) {\n        _ageOptions.push(__jsx(\"option\", {\n          key: j,\n          value: j\n        }, j));\n      }\n\n      let _htmlChildrenAges = [];\n\n      for (let j in props.practice.rooms[i].childrenAges) {\n        _htmlChildrenAges.push(__jsx(\"div\", {\n          key: j,\n          className: \"col-lg-3\"\n        }, __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"select\", {\n          className: \"custom-select\",\n          name: \"childrens_age[]\",\n          \"data-name\": \"ageChildrens\",\n          \"data-index\": j,\n          value: props.practice.rooms[i].childrenAges[j] || 0,\n          onChange: e => onChangeRoom(e, i)\n        }, _ageOptions))));\n      }\n\n      _html.push(__jsx(\"div\", {\n        key: i,\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-lg-3\"\n      }, __jsx(\"div\", {\n        className: \"form-group\"\n      }, i == 0 && __jsx(\"button\", {\n        type: \"button\",\n        className: \"btn btn-green\",\n        onClick: () => onAddRoom()\n      }, \"+ Camera\"), i > 0 && __jsx(React.Fragment, null, __jsx(\"label\", null, \"camera \", __jsx(\"span\", {\n        className: \"room-number\"\n      }, parseInt(i) + 1)), \"\\xA0\\xA0\", __jsx(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger btn-sm roomBox_buttonDelete\",\n        onClick: () => onDeleteRoom(i)\n      }, __jsx(\"i\", {\n        className: \"fas fa-times\"\n      }))))), __jsx(\"div\", {\n        className: \"col-lg-2\"\n      }, __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"select\", {\n        className: \"custom-select\",\n        id: `adults_${i}`,\n        name: \"adults[]\",\n        \"data-name\": \"adults\",\n        value: props.practice.rooms[i].adults || 0,\n        onChange: e => onChangeRoom(e, i)\n      }, \"$\", _htmlAdultOptions))), __jsx(\"div\", {\n        className: \"col-lg-2\"\n      }, __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"select\", {\n        className: \"custom-select\",\n        id: `childrens_${i}`,\n        name: \"childrens[]\",\n        \"data-name\": \"childrens\",\n        value: props.practice.rooms[i].childrens || 0,\n        onChange: e => onChangeRoom(e, i)\n      }, \"$\", _htmlChildrenOptions))), __jsx(\"div\", {\n        className: \"col-lg-4\"\n      }, __jsx(\"div\", {\n        className: \"row table_childrenAges\"\n      }, _htmlChildrenAges))));\n    }\n\n    return _html;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    className: \"needs-validation\" + (formik.errors ? \"was-validated\" : \"\"),\n    noValidate: true\n  }, __jsx(\"div\", {\n    className: \"box2 form-template-1\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-3\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(MyDateRangePicker, {\n    startDate: props.practice.checkin,\n    endDate: props.practice.checkout,\n    onChange: (startDate, endDate) => onChangeDatePicker(startDate, endDate)\n  }))), __jsx(\"div\", {\n    className: \"col-lg-3\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"select\", {\n    className: \"custom-select\" + (formik.errors.treatment ? \" is-invalid\" : \"\"),\n    name: \"treatment\",\n    id: \"treatment\" // value={props.practice.treatment || ''}\n    // onChange={(e) => onChange(e)}\n    ,\n    value: formik.values.treatment || '',\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Trattamento\"), props.priceList && Object.entries(props.priceList).map(([treatment, prices], index) => __jsx(\"option\", {\n    key: index,\n    value: treatment\n  }, treatment))), formik.errors.treatment && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.treatment))), __jsx(\"div\", {\n    className: \"col-lg-3\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"select\", {\n    className: \"custom-select\",\n    name: \"transfer_id\",\n    id: \"tranfer_id\",\n    value: props.practice.transfer_id || '',\n    onChange: e => onChange(e)\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Transfer\"), transfers.map((obj, index) => __jsx(\"option\", {\n    key: index,\n    value: obj.id\n  }, obj.name)))))), __jsx(\"div\", {\n    className: \"room-box\",\n    id: \"roomBox\"\n  }, renderRooms())), __jsx(\"div\", {\n    className: \"box3 form-template-2\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-3\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"div\", {\n    className: \"title\"\n  }, \"Richiedi il tuo preventivo gratuitamente\"))), __jsx(\"div\", {\n    className: \"col-lg-4\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\" + (formik.errors.first_name ? \" is-invalid\" : \"\"),\n    id: \"first_name\",\n    name: \"first_name\",\n    placeholder: \"Nome\" // value={props.practice.customer.first_name || \"\"}\n    // onChange={(e)=>onChange(e)}\n    ,\n    value: formik.values.first_name || '',\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    } // reuired=\"true\"\n\n  }), formik.errors.first_name && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.first_name)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\" + (formik.errors.last_name ? \" is-invalid\" : \"\"),\n    id: \"last_name\",\n    name: \"last_name\",\n    placeholder: \"Cognome\" // value={props.practice.customer.last_name || \"\"}\n    // onChange={(e)=>onChange(e)}\n    ,\n    value: formik.values.last_name || '',\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    }\n  }), formik.errors.last_name && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.last_name)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"email\",\n    className: \"form-control\" + (formik.errors.email ? \" is-invalid\" : \"\"),\n    id: \"email\",\n    name: \"email\",\n    placeholder: \"Email\" // defaultValue={props.practice.customer.email || \"\"}\n    // onChange={(e)=>onChange(e)}\n    ,\n    value: formik.values.email || '',\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    }\n  }), formik.errors.email && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.email)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control\" + (formik.errors.mobile ? \" is-invalid\" : \"\"),\n    id: \"mobile\",\n    name: \"mobile\",\n    placeholder: \"Cellulare\" // defaultValue={props.practice.customer.mobile || \"\"}\n    // onChange={(e)=>onChange(e)}\n    ,\n    value: formik.values.mobile || '',\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    }\n  }), formik.errors.mobile && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.mobile))), __jsx(\"div\", {\n    className: \"col-lg-5\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"textarea\", {\n    className: \"form-control\",\n    id: \"message\",\n    name: \"message\",\n    placeholder: \"Messaggio\",\n    value: props.practice.message || \"\",\n    onChange: e => onChange(e)\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"div\", {\n    className: \"custom-control custom-checkbox\"\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"custom-control-input\" + (formik.errors.privacy ? \" is-invalid\" : \"\"),\n    name: \"privacy\",\n    id: \"privacy\" // value={props.practice.privacy || 0}\n    // onChange={(e)=>onChange(e)}\n    ,\n    value: \"1\",\n    checked: formik.values.privacy == 1 ? 1 : 0,\n    onChange: e => {\n      onChange(e);\n      formik.handleChange(e);\n    }\n  }), __jsx(\"label\", {\n    className: \"custom-control-label\",\n    htmlFor: \"privacy\"\n  }, \"Acconsento al trattamento dei miei dati ai sensi dell\\u2019informativa sulla \", __jsx(\"a\", {\n    href: \"/privacy-policy\",\n    target: \"_blank\",\n    rel: \"nofollow\"\n  }, \"Privacy\"), \".\"), formik.errors.privacy && __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, formik.errors.privacy))), __jsx(\"div\", {\n    className: \"form-group text-right\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn-submit\"\n  }, \"richiedi disponibilit\\xE0\")))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    practice: state.practiceByGuest.item\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  let practiceByGuestAction = new PracticeByGuestAction();\n  return {\n    setPractice: data => {\n      dispatch(practiceByGuestAction.setItem(data));\n    },\n    resetPractice: () => {\n      dispatch(practiceByGuestAction.resetItem());\n    },\n    createPractice: data => {\n      dispatch(practiceByGuestAction.create(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingForm);","map":null,"metadata":{},"sourceType":"module"}