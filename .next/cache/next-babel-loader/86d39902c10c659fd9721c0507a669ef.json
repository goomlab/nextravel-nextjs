{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nexport default class BaseService {\n  constructor(url) {\n    this.url = `${process.env.api_url}` + (url ? url : '');\n    this.config = {\n      headers: {// API_KEY: '$2y$10$zgrnhniFfgWCIkTqUNmBJeJkre2AY3s7FXf8EIqdSzFodKK3uM7Jy',\n      }\n    };\n  }\n\n  checkAuthApi(json) {\n    let token = Cookies.get('access_token') || null;\n\n    if (token) {\n      if (json) return {\n        headers: {\n          // ...API.headers,\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      };else return {\n        headers: {\n          // ...API.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n          // 'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        }\n      };\n    } else {\n      if (json) {\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n      } else {\n        return {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        };\n      }\n    }\n  }\n\n  initApp() {\n    return axios.get(this.url + '/travelgo-one/frontend/initialize', this.config).then(response => {\n      return Promise.resolve(response.data);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  } // all(params){\n  //   return axios.get(this.url, { params }, this.config)\n  //   .then(response => {\n  //     return Promise.resolve(response.data.data);\n  //   })\n  //   .catch(error => {\n  //     return Promise.reject(error);\n  //   });\n  // }\n\n\n  all(params) {\n    let config = this.checkAuthApi();\n    return axios.get(this.url, _objectSpread({\n      params,\n      paramsSerializer: function (params) {\n        return qs.stringify(params, {\n          encode: false\n        });\n      }\n    }, config)).then(response => {\n      return Promise.resolve(response.data.data);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  get(id) {\n    return axios.get(`${this.url}/${id}`, this.config).then(response => {\n      return Promise.resolve(response.data.data);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  getBySlug(slug) {\n    return axios.get(`${this.url}/by-slug/${slug}`, this.config).then(response => {\n      return Promise.resolve(response.data.data);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  search(params) {\n    let config = this.checkAuthApi();\n    return axios.get(this.url, _objectSpread({\n      params,\n      paramsSerializer: function (params) {\n        return qs.stringify(params, {\n          encode: false\n        });\n      }\n    }, config)).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  load(id) {\n    let config = this.checkAuthApi();\n    return axios.get(`${this.url}/${id}`, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  createPost(postData) {\n    let config = this.checkAuthApi();\n    return axios.post(this.url, postData, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  create(postData) {\n    let config = this.checkAuthApi('json');\n    return axios.post(this.url, postData, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  update(id, postData) {\n    let config = this.checkAuthApi('json');\n    config = _objectSpread(_objectSpread({}, config), {}, {\n      onUploadProgress: progressEvent => console.log(progressEvent.loaded)\n    });\n    return axios.put(this.url + '/' + id, postData, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  updatePost(id, postData) {\n    let config = this.checkAuthApi();\n    postData.append('_method', 'PUT');\n    return axios.post(this.url + '/' + id, postData, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  remove(id) {\n    let config = this.checkAuthApi();\n    return axios.delete(this.url + '/' + id, _objectSpread({}, config)).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n  updateFields(id, postData) {\n    let config = this.checkAuthApi('json'); // config.headers = {\n    //   ...config.headers,\n    //   'Content-type' : 'application/form-url-encode'\n    // }\n    // postData['_method'] = 'PUT';\n\n    return axios.put(this.url + '/update-fields/' + id, postData, config).then(response => {\n      return Promise.resolve(response);\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}