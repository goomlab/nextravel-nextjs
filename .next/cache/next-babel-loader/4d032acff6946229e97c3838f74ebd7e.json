{"ast":null,"code":"import BaseAction from '~/packages/BaseAction';\nimport PageLoaderAction from '~/packages/Base/actions/PageLoaderAction';\nimport AlertMessageAction from '~/packages/Base/actions/AlertMessageAction';\nimport PracticeService from '../services/PracticeService';\nexport const practiceByGuestConsts = {\n  SET_ITEM: 'PRACTICE_BY_GUEST_SET_ITEM',\n  RESET_ITEM: 'PRACTICE_BY_GUEST_RESET_ITEM',\n  GET_CLIENT_IP: 'PRACTICE_BY_GUEST_GET_CLIENT_IP',\n  CREATE: 'PRACTICE_BY_GUEST_CREATE'\n};\nexport default class PracticeByGuestAction extends BaseAction {\n  constructor() {\n    super();\n    this.service = new PracticeService();\n    this.consts = practiceByGuestConsts;\n  }\n\n  setItem(item) {\n    return dispatch => {\n      dispatch({\n        type: this.consts.SET_ITEM,\n        item: item\n      });\n    };\n  }\n\n  resetItem() {\n    return dispatch => {\n      dispatch({\n        type: this.consts.RESET_ITEM\n      });\n    };\n  }\n\n  getClientIp() {\n    return dispatch => {\n      this.service.getClientIp().then(response => {\n        dispatch({\n          type: this.consts.GET_CLIENT_IP,\n          clientIp: response.data.clientIp\n        });\n      }).catch(error => {});\n    };\n  }\n\n  create(params) {\n    return dispatch => {\n      dispatch(PageLoaderAction.show());\n      this.service.createByGuest(params).then(response => {\n        dispatch(this.resetItem());\n        dispatch(AlertMessageAction.alertMessageSuccess('Richiesta inviata con successo!'));\n        dispatch(PageLoaderAction.hide());\n      }).catch(error => {\n        dispatch(AlertMessageAction.alertMessageError(error.response.data.meta.message));\n        dispatch(PageLoaderAction.hide());\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/giuseppe/Workspace/Di Costanzo Marco/nextravel.it/www/nextravel-nextjs/packages/TravelgoOne/actions/PracticeByGuestAction.js"],"names":["BaseAction","PageLoaderAction","AlertMessageAction","PracticeService","practiceByGuestConsts","SET_ITEM","RESET_ITEM","GET_CLIENT_IP","CREATE","PracticeByGuestAction","constructor","service","consts","setItem","item","dispatch","type","resetItem","getClientIp","then","response","clientIp","data","catch","error","create","params","show","createByGuest","alertMessageSuccess","hide","alertMessageError","meta","message"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,OAAO,MAAMC,qBAAqB,GAAG;AACnCC,EAAAA,QAAQ,EAAE,4BADyB;AAEnCC,EAAAA,UAAU,EAAE,8BAFuB;AAGnCC,EAAAA,aAAa,EAAE,iCAHoB;AAInCC,EAAAA,MAAM,EAAE;AAJ2B,CAA9B;AAOP,eAAe,MAAMC,qBAAN,SAAoCT,UAApC,CAA+C;AAC5DU,EAAAA,WAAW,GAAG;AACd;AACA,SAAKC,OAAL,GAAe,IAAIR,eAAJ,EAAf;AACA,SAAKS,MAAL,GAAcR,qBAAd;AACC;;AAIDS,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,WAAQC,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYP,QADX;AAEPS,QAAAA,IAAI,EAAEA;AAFC,OAAD,CAAR;AAID,KALD;AAMD;;AAEDG,EAAAA,SAAS,GAAG;AACV,WAAQF,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYN;AADX,OAAD,CAAR;AAGD,KAJD;AAKD;;AAEDY,EAAAA,WAAW,GAAG;AACZ,WAAQH,QAAD,IAAc;AACnB,WAAKJ,OAAL,CAAaO,WAAb,GACCC,IADD,CACMC,QAAQ,IAAI;AAChBL,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYL,aADX;AAEPc,UAAAA,QAAQ,EAAED,QAAQ,CAACE,IAAT,CAAcD;AAFjB,SAAD,CAAR;AAID,OAND,EAOCE,KAPD,CAOOC,KAAK,IAAI,CAEf,CATD;AAUD,KAXD;AAYD;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,WAAQX,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAACd,gBAAgB,CAAC0B,IAAjB,EAAD,CAAR;AACA,WAAKhB,OAAL,CAAaiB,aAAb,CAA2BF,MAA3B,EACCP,IADD,CACMC,QAAQ,IAAI;AAChBL,QAAAA,QAAQ,CAAC,KAAKE,SAAL,EAAD,CAAR;AACAF,QAAAA,QAAQ,CAACb,kBAAkB,CAAC2B,mBAAnB,CAAuC,iCAAvC,CAAD,CAAR;AACAd,QAAAA,QAAQ,CAACd,gBAAgB,CAAC6B,IAAjB,EAAD,CAAR;AACD,OALD,EAMCP,KAND,CAMOC,KAAK,IAAI;AACdT,QAAAA,QAAQ,CAACb,kBAAkB,CAAC6B,iBAAnB,CAAqCP,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBU,IAApB,CAAyBC,OAA9D,CAAD,CAAR;AACAlB,QAAAA,QAAQ,CAACd,gBAAgB,CAAC6B,IAAjB,EAAD,CAAR;AACD,OATD;AAUD,KAZD;AAaD;;AAvD2D","sourcesContent":["import BaseAction from '~/packages/BaseAction'\nimport PageLoaderAction from '~/packages/Base/actions/PageLoaderAction'\nimport AlertMessageAction from '~/packages/Base/actions/AlertMessageAction'\nimport PracticeService from '../services/PracticeService'\n\nexport const practiceByGuestConsts = {\n  SET_ITEM: 'PRACTICE_BY_GUEST_SET_ITEM',\n  RESET_ITEM: 'PRACTICE_BY_GUEST_RESET_ITEM',\n  GET_CLIENT_IP: 'PRACTICE_BY_GUEST_GET_CLIENT_IP',\n  CREATE: 'PRACTICE_BY_GUEST_CREATE',\n}\n\nexport default class PracticeByGuestAction extends BaseAction {\n  constructor() {\n\t\tsuper();\n\t\tthis.service = new PracticeService();\n\t\tthis.consts = practiceByGuestConsts;\n  }\n\n\n\n  setItem(item) {\n    return (dispatch) => {\n      dispatch({\n        type: this.consts.SET_ITEM,\n        item: item\n      })\n    }\n  }\n\n  resetItem() {\n    return (dispatch) => {\n      dispatch({\n        type: this.consts.RESET_ITEM,\n      })\n    }\n  }\n\n  getClientIp() {\n    return (dispatch) => {\n      this.service.getClientIp()\n      .then(response => {\n        dispatch({\n          type: this.consts.GET_CLIENT_IP,\n          clientIp: response.data.clientIp,\n        })\n      })\n      .catch(error => {\n\n      })\n    }\n  }\n\n  create(params) {\n    return (dispatch) => {\n      dispatch(PageLoaderAction.show())\n      this.service.createByGuest(params)\n      .then(response => {\n        dispatch(this.resetItem())\n        dispatch(AlertMessageAction.alertMessageSuccess('Richiesta inviata con successo!'))\n        dispatch(PageLoaderAction.hide())\n      })\n      .catch(error => {\n        dispatch(AlertMessageAction.alertMessageError(error.response.data.meta.message))\n        dispatch(PageLoaderAction.hide())\n      })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}