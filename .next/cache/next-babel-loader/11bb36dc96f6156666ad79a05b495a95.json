{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { MakeStore, createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\nimport alertMessage from './packages/Base/reducers/AlertMessageReducer';\nimport practiceByGuest from './packages/TravelgoOne/reducers/PracticeByGuestReducer'; // create a makeStore function\n\nexport var makeStore = function makeStore(context) {\n  return createStore(combineReducers({\n    alertMessage: alertMessage,\n    practiceByGuest: practiceByGuest\n  }), {}, composeWithDevTools(applyMiddleware(reduxThunk)));\n}; // export an assembled wrapper\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/giuseppe/Workspace/Di Costanzo Marco/nextravel.it/www/nextravel-nextjs/store.js"],"names":["createStore","combineReducers","applyMiddleware","reduxThunk","composeWithDevTools","MakeStore","createWrapper","Context","HYDRATE","alertMessage","practiceByGuest","makeStore","context","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAAQC,SAAR,EAAmBC,aAAnB,EAAkCC,OAAlC,EAA2CC,OAA3C,QAAyD,oBAAzD;AAEA,OAAOC,YAAP,MAAyB,8CAAzB;AACA,OAAOC,eAAP,MAA4B,wDAA5B,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,OAAO;AAAA,SAAIZ,WAAW,CAC3CC,eAAe,CAAC;AAChBQ,IAAAA,YAAY,EAAEA,YADE;AAEhBC,IAAAA,eAAe,EAAEA;AAFD,GAAD,CAD4B,EAK7C,EAL6C,EAM7CN,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAN0B,CAAf;AAAA,CAAzB,C,CASP;;AACA,OAAO,IAAMU,OAAO,GAAGP,aAAa,CAACK,SAAD,EAAY;AAACG,EAAAA,KAAK,EAAE;AAAR,CAAZ,CAA7B","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {MakeStore, createWrapper, Context, HYDRATE} from 'next-redux-wrapper';\n\nimport alertMessage from './packages/Base/reducers/AlertMessageReducer'\nimport practiceByGuest from './packages/TravelgoOne/reducers/PracticeByGuestReducer'\n\n// create a makeStore function\nexport const makeStore = context => createStore(\n    combineReducers({\n    alertMessage: alertMessage,\n    practiceByGuest: practiceByGuest\n  }),\n  {},\n  composeWithDevTools(applyMiddleware(reduxThunk))\n);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, {debug: true});"]},"metadata":{},"sourceType":"module"}